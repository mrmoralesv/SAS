// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(SASContext))]
    [Migration("20230623171255_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.CatalogoProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasComment("Identificador de la clase de los productos");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Clase")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Clase de la Division");

                    b.Property<string>("Division")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Nombre de la Division");

                    b.Property<string>("Grupo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("grupo de la Division");

                    b.HasKey("Id");

                    b.ToTable("CatalogoProducto", "Viaticos");
                });

            modelBuilder.Entity("Core.Entities.DatabaseLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasComment("Primary key for DatabaseLog records.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DatabaseUser")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("The user who implemented the DDL change.");

                    b.Property<string>("Event")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("The type of DDL statement that was executed.");

                    b.Property<string>("Object")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("The object that was changed by the DDL statment.");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime")
                        .HasComment("The date and time the DDL change occurred.");

                    b.Property<string>("Schema")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("The schema to which the changed object belongs.");

                    b.Property<string>("Tsql")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TSQL")
                        .HasComment("The exact Transact-SQL statement that was executed.");

                    b.Property<string>("XmlEvent")
                        .HasColumnType("xml")
                        .HasComment("The raw XML data generated by database trigger.");

                    b.HasKey("Id");

                    b.ToTable("DatabaseLog", null, t =>
                        {
                            t.HasComment("Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.");
                        });
                });

            modelBuilder.Entity("Core.Entities.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasComment("Identificador de la factura");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Estatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))")
                        .HasComment("0=Factura cancelada, 1=Factura autorizada");

                    b.Property<DateTime?>("FechaInsert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Fecha de la insercion de la factura");

                    b.Property<DateTime?>("FechaTimbrado")
                        .HasColumnType("datetime")
                        .HasComment("Fecha del timbrado de la factura");

                    b.Property<int>("ReporteGastoId")
                        .HasColumnType("int")
                        .HasColumnName("ReporteGastosID")
                        .HasComment("Identificador del reporte de gastos al que pertenece la factura");

                    b.Property<string>("RfCEmisor")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("RFCEmisor")
                        .HasComment("RFC del emisor de la factura");

                    b.Property<string>("RfCReceptor")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("RFCReceptor")
                        .HasComment("RFC del receptor de la factura");

                    b.Property<string>("SelloSat")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SelloSAT")
                        .HasComment("Sello digital de emisor");

                    b.Property<decimal>("Total")
                        .HasColumnType("money")
                        .HasComment("Monto total de la factura");

                    b.Property<string>("UUID")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("UUID")
                        .HasComment("UUID de la factura");

                    b.Property<string>("XmlFactura")
                        .HasColumnType("xml")
                        .HasComment("XML de la factura");

                    b.HasKey("Id");

                    b.HasIndex("ReporteGastoId");

                    b.HasIndex(new[] { "UUID" }, "index_UUID")
                        .IsUnique()
                        .HasFilter("[UUID] IS NOT NULL");

                    b.ToTable("Factura", "Viaticos");
                });

            modelBuilder.Entity("Core.Entities.FacturaDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasComment("Cantidad de servicios o productos");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasComment("Descripcion de servicio o producto");

                    b.Property<int>("FacturaId")
                        .HasColumnType("int")
                        .HasColumnName("FacturaID")
                        .HasComment("Identificador de la factura");

                    b.Property<decimal>("Impuestos")
                        .HasColumnType("money")
                        .HasComment("Impuestos");

                    b.Property<string>("Notas")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasComment("Notas para el administrador de los viaticos");

                    b.Property<int>("ProductoValidoId")
                        .HasColumnType("int")
                        .HasColumnName("ProductoValidoID")
                        .HasComment("Identificador del producto que esta validado para poder facturar,Clave Servicio o Producto");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("money")
                        .HasComment("Valor unitario de servicio o producto");

                    b.HasKey("Id");

                    b.HasIndex("FacturaId");

                    b.ToTable("FacturaDetalle", "Viaticos");
                });

            modelBuilder.Entity("Core.Entities.ProductoValido", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasComment("Identificador del producto que esta validado para poder facturar,Clave Servicio o Producto");

                    b.Property<int>("CatalogoProductoId")
                        .HasColumnType("int")
                        .HasColumnName("CatalogoProductoID")
                        .HasComment("Identificador para clasificacion del producto");

                    b.Property<bool?>("Estatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("0= Producto no valido para SINCI 1=Producto valido para SINCI");

                    b.Property<DateTime?>("FechaInsert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Fecha en que se inserto el producto");

                    b.Property<string>("NombreProducto")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasComment("Descripcion del producto");

                    b.HasKey("Id");

                    b.ToTable("ProductoValido", "Viaticos");
                });

            modelBuilder.Entity("Core.Entities.ReporteGasto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasComment("Identificador para los cada uno de los reportes de gastos");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Estatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))")
                        .HasComment("0=No validado 1=Validado");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime")
                        .HasComment("Fecha fin del reporte de gastos");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime")
                        .HasComment("Fecha inicio del reporte de gastos");

                    b.Property<DateTime?>("FechaInsert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Fecha en que se genero el reporte de gastos");

                    b.Property<int>("ViaticoId")
                        .HasColumnType("int")
                        .HasColumnName("ID_VIATICO")
                        .HasComment("Idetificador para cada uno de los viaticos");

                    b.HasKey("Id");

                    b.ToTable("ReporteGastos", "Viaticos");
                });

            modelBuilder.Entity("Core.Entities.Saldo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasComment("Identificador para cada uno de los aumentos o disminuciones de saldo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PersonalId")
                        .HasColumnType("int")
                        .HasColumnName("ID_PERSONAL")
                        .HasComment("Identificador personal del trabajador");

                    b.Property<decimal>("SaldoAD")
                        .HasColumnType("money")
                        .HasColumnName("Saldo")
                        .HasComment("Aumentos y disminuciones de saldo");

                    b.HasKey("Id");

                    b.ToTable("Saldo", "Cobranza");
                });

            modelBuilder.Entity("Core.Entities.SaldoDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("Descripcion del aumento o disminucion de saldo");

                    b.Property<decimal>("SaldoAD")
                        .HasColumnType("money")
                        .HasComment("Aumentos y disminuciones de saldo");

                    b.Property<int>("SaldoId")
                        .HasColumnType("int")
                        .HasColumnName("SaldoID")
                        .HasComment("Identificador del aumento o disminucion de saldo");

                    b.HasKey("Id");

                    b.HasIndex("SaldoId");

                    b.ToTable("SaldoDetalle", "Cobranza");
                });

            modelBuilder.Entity("Core.Entities.Factura", b =>
                {
                    b.HasOne("Core.Entities.ReporteGasto", "ReporteGastos")
                        .WithMany("Facturas")
                        .HasForeignKey("ReporteGastoId")
                        .IsRequired();

                    b.Navigation("ReporteGastos");
                });

            modelBuilder.Entity("Core.Entities.FacturaDetalle", b =>
                {
                    b.HasOne("Core.Entities.Factura", "Factura")
                        .WithMany()
                        .HasForeignKey("FacturaId")
                        .IsRequired()
                        .HasConstraintName("FK_Viaticos_Factura_FacturaID");

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("Core.Entities.SaldoDetalle", b =>
                {
                    b.HasOne("Core.Entities.Saldo", "Saldo")
                        .WithMany()
                        .HasForeignKey("SaldoId")
                        .IsRequired()
                        .HasConstraintName("FK_Cobranza_Saldo_SaldoID");

                    b.Navigation("Saldo");
                });

            modelBuilder.Entity("Core.Entities.ReporteGasto", b =>
                {
                    b.Navigation("Facturas");
                });
#pragma warning restore 612, 618
        }
    }
}
